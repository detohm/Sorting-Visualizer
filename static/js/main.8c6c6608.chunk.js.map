{"version":3,"sources":["components/organisms/Header/Header.module.css","components/atoms/Bar/Bar.module.css","components/organisms/Visualizer/Visualizer.module.css","algorithms/algorithm.interface.ts","algorithms/animation.ts","algorithms/bubbleSort.ts","algorithms/mergeSort.ts","algorithms/quickSort.ts","components/atoms/Button/Button.tsx","components/atoms/RangeSlider/RangeSlider.tsx","components/organisms/Header/Header.tsx","components/organisms/Layout/Layout.tsx","components/atoms/Bar/Bar.tsx","components/organisms/Visualizer/Visualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","AlgorithmEnum","animationType","bubbleSort","elements","arr","slice","animations","sortedIdx","i","length","j","push","type","Probe","idx1","idx2","Swap","ChangeElements","ChangeSortedIdx","split","auxElements","begin","end","sortedElements","middle","Math","floor","merge","k","finalMerge","range","start","mergeSort","actualElements","sort","pivotIdx","partition","pivot","quickSort","Button","props","className","disabled","onClick","label","RangeSlider","useState","value","setValue","min","max","onChange","e","preventDefault","target","Header","handleClick","algo","isRunning","onAlgorithmChange","styles","header","title","onNumChange","parseInt","MergeSort","currentAlgorithm","QuickSort","BubbleSort","onStartButtonClick","Layout","children","Bar","bar","style","width","height","background","color","Visualizer","barWidth","window","innerWidth","visualizer","map","highlightSecondIdx","includes","highlightIdx","generateElements","num","random","App","setCurrentAlgorithm","setElements","setHighlightIdx","setHighlightSecondIdx","setSortedIdx","setIsRunning","clearVisual","animate","frame","shift","timer","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c6c6608.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2VFtz\",\"title\":\"Header_title__2q6Rf\",\"range-input\":\"Header_range-input__UI4qS\",\"start-btn\":\"Header_start-btn__dnHbF\",\"nav-item\":\"Header_nav-item__2n2pu\",\"nav-item-active\":\"Header_nav-item-active__tqkoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"Bar_bar__29Wh8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"visualizer\":\"Visualizer_visualizer__25w79\"};","export enum AlgorithmEnum {\n    MergeSort,\n    QuickSort,\n    BubbleSort\n};","export enum animationType {\n    Probe,\n    Swap,\n    ChangeElements,\n    ChangeSortedIdx,\n}\n\nexport interface animationFrame {\n    type: animationType;\n\n    idx1?: number;\n    idx2?: number;\n\n    elements?: number[];\n    sortedIdx?: number[];\n};","import { animationFrame, animationType } from './animation';\n\nconst bubbleSort = (elements: number[]): animationFrame[] => {\n    let arr = elements.slice(0);\n\n    let animations: animationFrame[] = [];\n\n    let sortedIdx: number[] = [];\n\n    for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - 1 - i; j++) {\n\n            animations.push({\n                type: animationType.Probe,\n                idx1: j,\n                idx2: j + 1\n            });\n\n            if (arr[j] > arr[j + 1]) {\n\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\n                animations.push({\n                    type: animationType.Swap,\n                    idx1: j,\n                    idx2: j + 1\n                });\n\n                animations.push({\n                    type: animationType.ChangeElements,\n                    elements: arr.slice(0)\n                });\n            }\n        }\n        sortedIdx.push(arr.length - 1 - i);\n        animations.push({\n            type: animationType.ChangeSortedIdx,\n            sortedIdx: sortedIdx.slice(0)\n        });\n    }\n    sortedIdx.push(0);\n    animations.push({\n        type: animationType.ChangeSortedIdx,\n        sortedIdx: sortedIdx.slice(0)\n    });\n    return animations;\n};\n\nexport default bubbleSort;","import { animationFrame, animationType } from './animation';\n\nconst mergeSort = (elements: number[]): animationFrame[] => {\n    let animations: animationFrame[] = [];\n    let auxElements = elements.slice(0);\n    let actualElements = elements.slice(0);\n    let sortedElements = elements.slice(0); // for visualizing\n    split(auxElements, actualElements, 0,\n        actualElements.length - 1, animations, sortedElements);\n\n    return animations;\n};\n\nconst split = (\n    auxElements: number[],\n    elements: number[],\n    begin: number,\n    end: number,\n    animations: animationFrame[],\n    sortedElements: number[]\n) => {\n    if (end === begin) {\n        return;\n    }\n    let middle = Math.floor((end + begin) / 2);\n\n    // technique - alternate between element & auxElements per each recursive\n    split(elements, auxElements, begin, middle, animations, sortedElements);\n    split(elements, auxElements, middle + 1, end, animations, sortedElements);\n    merge(auxElements, elements, begin, middle, end, animations, sortedElements);\n};\n\nconst merge = (\n    auxElements: number[],\n    elements: number[],\n    begin: number,\n    middle: number,\n    end: number,\n    animations: animationFrame[],\n    sortedElements: number[]\n) => {\n    let i: number = begin;\n    let j: number = middle + 1;\n    let k: number = begin;\n\n    let finalMerge: boolean = (begin === 0 && end === elements.length - 1);\n\n    while (i <= middle && j <= end) {\n\n        animations.push({\n            type: animationType.Probe,\n            idx1: k, idx2: k\n        });\n        if (auxElements[i] <= auxElements[j]) {\n            elements[k] = auxElements[i];\n            i++;\n        } else {\n            elements[k] = auxElements[j];\n            j++;\n        }\n        sortedElements[k] = elements[k];\n        animations.push({\n            type: animationType.ChangeElements,\n            elements: sortedElements.slice(0)\n        });\n        k++;\n        if (finalMerge) {\n            animations.push({\n                type: animationType.ChangeSortedIdx,\n                sortedIdx: range(0, k)\n            });\n        }\n    }\n\n    while (i <= middle) {\n\n        animations.push({\n            type: animationType.Probe,\n            idx1: k, idx2: k\n        });\n        elements[k] = auxElements[i];\n        i++;\n\n        sortedElements[k] = elements[k];\n        animations.push({\n            type: animationType.ChangeElements,\n            elements: sortedElements.slice(0)\n        });\n        k++;\n        if (finalMerge) {\n            animations.push({\n                type: animationType.ChangeSortedIdx,\n                sortedIdx: range(0, k)\n            });\n        }\n    }\n    while (j <= end) {\n\n        animations.push({\n            type: animationType.Probe,\n            idx1: k, idx2: k\n        });\n        elements[k] = auxElements[j];\n        j++;\n\n        sortedElements[k] = elements[k];\n        animations.push({\n            type: animationType.ChangeElements,\n            elements: sortedElements.slice(0)\n        });\n        k++;\n        if (finalMerge) {\n            animations.push({\n                type: animationType.ChangeSortedIdx,\n                sortedIdx: range(0, k)\n            });\n        }\n    }\n\n};\n\nconst range = (start: number, end: number): number[] => {\n    let arr: number[] = [];\n    for (let i = start; i <= end; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\n\nexport default mergeSort;","import { animationFrame, animationType } from \"./animation\";\n\nconst quickSort = (elements: number[]): animationFrame[] => {\n    let animations: animationFrame[] = [];\n    let sortedIdx: number[] = [];\n    sort(elements.slice(0), 0, elements.length - 1, sortedIdx, animations);\n    return animations;\n};\n\nconst sort = (\n    elements: number[],\n    begin: number,\n    end: number,\n    sortedIdx: number[],\n    animations: animationFrame[]) => {\n\n    if (begin >= end) {\n\n        sortedIdx.push(begin);\n        animations.push({\n            type: animationType.ChangeSortedIdx,\n            sortedIdx: sortedIdx.slice(0)\n        });\n        return;\n    }\n    let pivotIdx: number = partition(elements, begin, end, sortedIdx, animations);\n    sort(elements, begin, pivotIdx - 1, sortedIdx, animations);\n    sort(elements, pivotIdx + 1, end, sortedIdx, animations);\n}\n\nconst partition = (\n    elements: number[],\n    begin: number,\n    end: number,\n    sortedIdx: number[],\n    animations: animationFrame[]): number => {\n\n    let pivot: number = elements[end];\n    let i = begin - 1;\n    for (let j = begin; j <= end - 1; j++) {\n        animations.push({\n            type: animationType.Probe,\n            idx1: j,\n            idx2: end\n        });\n        if (elements[j] <= pivot) {\n            i += 1;\n\n            [elements[i], elements[j]] = [elements[j], elements[i]];\n            animations.push({\n                type: animationType.ChangeElements,\n                elements: elements.slice(0)\n            });\n        }\n    }\n\n    [elements[i + 1], elements[end]] = [elements[end], elements[i + 1]];\n    animations.push({\n        type: animationType.ChangeElements,\n        elements: elements.slice(0)\n    });\n\n    sortedIdx.push(i + 1);\n    animations.push({\n        type: animationType.ChangeSortedIdx,\n        sortedIdx: sortedIdx.slice(0)\n    });\n\n    return i + 1;\n}\n\nexport default quickSort;","import { IButton } from './Button.interface';\n\nconst Button = (props: IButton) => {\n    return (\n        <button\n            className={props.className}\n            disabled={props.disabled}\n            onClick={props.onClick}>{props.label}</button>\n    );\n}\n\nexport default Button;","import React, { useState } from \"react\";\nimport { IRangeSlider } from \"./RangeSlider.interface\";\n\nconst RangeSlider = (props: IRangeSlider) => {\n    const [value, setValue] = useState(\"20\");\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setValue(e.target.value);\n        if (props.onChange) {\n            props.onChange(e);\n        }\n    };\n\n    return (\n        <input type=\"range\"\n            className={props.className}\n            min={props.min}\n            max={props.max}\n            value={value}\n            disabled={props.disabled}\n            onChange={handleChange} />\n    );\n};\n\nexport default RangeSlider;","import React from 'react';\nimport { AlgorithmEnum } from '../../../algorithms/algorithm.interface';\nimport Button from '../../atoms/Button/Button';\nimport RangeSlider from '../../atoms/RangeSlider/RangeSlider';\nimport { IHeader } from './Header.interface';\nimport styles from './Header.module.css';\n\n\nconst Header = (props: IHeader) => {\n\n    const min = 2, max = 50;\n    const handleRangeSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        props.onNumChange(parseInt(e.target.value));\n    };\n\n    // algorithm types CTA\n    const handleClick = (algo: AlgorithmEnum) => {\n        return (e: React.MouseEvent<HTMLElement>) => {\n            if (props.isRunning) {\n                return;\n            }\n            props.onAlgorithmChange(algo);\n        };\n    }\n\n    return (\n        <div className={styles.header}>\n            <div className={styles.title}>\n                Sorting Visualizer\n            </div>\n\n            <RangeSlider\n                className={styles['range-input']}\n                min={min}\n                max={max}\n                disabled={props.isRunning}\n                onChange={handleRangeSliderChange} />\n\n\n\n\n            <div\n                onClick={handleClick(AlgorithmEnum.MergeSort)}\n                className={\n                    (props.currentAlgorithm ===\n                        AlgorithmEnum.MergeSort) ?\n                        styles['nav-item-active'] : styles['nav-item']}\n            >Merge Sort</div>\n\n            <div\n                onClick={handleClick(AlgorithmEnum.QuickSort)}\n                className={\n                    (props.currentAlgorithm ===\n                        AlgorithmEnum.QuickSort) ?\n                        styles['nav-item-active'] : styles['nav-item']}\n            >Quick Sort</div>\n\n            <div\n                onClick={handleClick(AlgorithmEnum.BubbleSort)}\n                className={(props.currentAlgorithm ===\n                    AlgorithmEnum.BubbleSort) ?\n                    styles['nav-item-active'] : styles['nav-item']}\n            >Bubble Sort</div>\n\n            <Button\n                className={styles['start-btn']}\n                label={props.isRunning ? \"Running!\" : \"Start!\"}\n                disabled={props.isRunning}\n                onClick={props.onStartButtonClick} />\n        </div>\n    );\n};\n\nexport default Header;","import { ILayout } from \"./Layout.interface\";\n\nconst Layout = (props: ILayout) => {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Layout;","import { IBar } from './Bar.interface';\nimport styles from './Bar.module.css';\nconst Bar = (props: IBar) => {\n    return (\n        <div\n            className={styles.bar}\n            style={\n                {\n                    width: `${props.width}px`,\n                    height: `${props.height}px`,\n                    background: `${props.color}`\n                }\n            }>\n            {props.height}\n        </div>\n    )\n};\n\nexport default Bar;","import Bar from '../../atoms/Bar/Bar';\nimport { IVisualizer } from \"./Visualizer.interface\";\nimport styles from './Visualizer.module.css';\n\nconst mainColor: string = \"darkcyan\";\nconst highlightColor: string = \"red\";\nconst highlightSecondColor: string = \"blue\";\n\nconst sortedColor: string = \"#59db71\";\nconst heightMultiplier = 3;\n\nconst Visualizer = (props: IVisualizer) => {\n\n    const barWidth = window.innerWidth / (props.elements.length * 2);\n\n    return (\n        <div className={styles.visualizer}>\n            {props.elements.map((e, i) =>\n                <Bar\n                    key={i}\n                    width={barWidth}\n                    height={e * heightMultiplier}\n                    color={props.highlightSecondIdx.includes(i) ?\n                        highlightSecondColor : props.highlightIdx.includes(i) ?\n                            highlightColor : props.sortedIdx.includes(i) ?\n                                sortedColor : mainColor} />\n            )}\n        </div>\n    );\n};\n\nexport default Visualizer;","import React, { useState } from 'react';\nimport { AlgorithmEnum } from './algorithms/algorithm.interface';\nimport { animationFrame, animationType } from './algorithms/animation';\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport Header from './components/organisms/Header/Header';\nimport Layout from './components/organisms/Layout/Layout';\nimport Visualizer from './components/organisms/Visualizer/Visualizer';\n\n// helper for generating randomized elements\nconst generateElements = (num: number): number[] => {\n  let arr: number[] = [];\n  for (let i = 0; i < num; i++) {\n    arr.push(Math.floor(Math.random() * 200) + 20);\n  }\n  return arr;\n}\n\n// helper for calculating animation speed\nconst animateSpeed = (num: number): number => {\n  if (num <= 10) { return 100; }\n  if (num > 10 && num <= 25) { return 50; }\n  return 1;\n};\n\nconst App = () => {\n\n  const [currentAlgorithm, setCurrentAlgorithm]\n    = useState<AlgorithmEnum>(AlgorithmEnum.MergeSort);\n  const handleAlgorithmChange = (algo: AlgorithmEnum) => {\n    setCurrentAlgorithm(algo);\n    clearVisual();\n  };\n\n  const [elements, setElements] = useState<number[]>(generateElements(20));\n  const handleNumChange = (num: number) => {\n    setElements(generateElements(num));\n    clearVisual();\n  };\n\n  const [highlightIdx, setHighlightIdx] = useState<number[]>([]);\n  const [highlightSecondIdx, setHighlightSecondIdx] = useState<number[]>([]);\n  const [sortedIdx, setSortedIdx] = useState<number[]>([]);\n\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const handleStartButtonClick = () => {\n    if (!isRunning) {\n      setIsRunning(true);\n    }\n\n    switch (currentAlgorithm) {\n      case AlgorithmEnum.BubbleSort:\n        animate(bubbleSort(elements));\n        break;\n      case AlgorithmEnum.MergeSort:\n        animate(mergeSort(elements));\n        break;\n      case AlgorithmEnum.QuickSort:\n        animate(quickSort(elements));\n        break;\n      default:\n        setIsRunning(false);\n    }\n  }\n\n  const clearVisual = () => {\n    setHighlightIdx([]);\n    setSortedIdx([]);\n  };\n\n\n\n  // recursive approach for animating the bars.\n  const animate = (animations: animationFrame[]) => {\n    if (animations.length === 0) {\n      setIsRunning(false);\n      setHighlightIdx([]);\n      setHighlightSecondIdx([]);\n\n      return;\n    }\n    let frame: animationFrame = animations[0];\n    switch (frame.type) {\n      case animationType.Probe:\n        setHighlightIdx([frame.idx1!, frame.idx2!]);\n        setHighlightSecondIdx([]);\n        break;\n      case animationType.Swap:\n        setHighlightSecondIdx([frame.idx1!, frame.idx2!]);\n        break;\n      case animationType.ChangeSortedIdx:\n        setSortedIdx(frame.sortedIdx!);\n        break;\n      case animationType.ChangeElements:\n        setElements(frame.elements!);\n    }\n    animations.shift();\n    let timer = setTimeout(() => {\n      clearTimeout(timer); // preventing memory leak.\n      animate(animations);\n    }, animateSpeed(elements.length));\n  }\n\n  return (\n    <Layout>\n      <Header\n        currentAlgorithm={currentAlgorithm}\n        isRunning={isRunning}\n        onNumChange={handleNumChange}\n        onStartButtonClick={handleStartButtonClick}\n        onAlgorithmChange={handleAlgorithmChange} />\n\n      <Visualizer\n        currentAlgorithm={currentAlgorithm}\n        elements={elements}\n        highlightIdx={highlightIdx}\n        highlightSecondIdx={highlightSecondIdx}\n        sortedIdx={sortedIdx}\n      />\n\n    </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}